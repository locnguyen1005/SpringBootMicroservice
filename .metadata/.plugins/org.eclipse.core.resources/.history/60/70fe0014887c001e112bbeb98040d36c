package com.example.demo.Service;

import org.hibernate.sql.model.internal.MutationOperationGroupNone;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.example.demo.Common.CommonException;
import com.example.demo.Config.Config;
import com.example.demo.DTO.AccountDTO;
import com.example.demo.DTO.ProductDTO;
import com.example.demo.Entity.AccountEntity;
import com.example.demo.Event.AccountProducer;
import com.example.demo.Repository.AccountRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
@Slf4j
public class AccountService {
	
	private static final String Class = null;
	@Autowired
	private AccountRepository accountRepository;
	@Autowired 
	private ModelMapper mapper;
	@Autowired
	private AccountProducer accountProducer;
	public Flux<AccountDTO> getAllAccount() {
		return accountRepository.findAll().map(accountEntity -> mapper.map(accountEntity , AccountDTO.class)).switchIfEmpty(Mono.error(new Exception("Account Empty")));
	}
	public Mono<Boolean> checkDuplicate(AccountDTO accountDTO){
		return accountRepository.findByEmail(accountDTO.getEmail())
				.flatMap(accountEntity -> Mono.just(true))
				.switchIfEmpty(Mono.just(Boolean.FALSE));
	}
	public Mono<AccountDTO> createAccount(AccountDTO accountDTO){
		if((checkDuplicate(accountDTO).block()).equals(Boolean.TRUE)) {
			 return Mono.error(new CommonException(accountDTO.getEmail(), "Account duplicate", HttpStatus.BAD_REQUEST));
		}
		else {

			return Mono.just(accountDTO)
					.map(newAccountDTO -> mapper.map(newAccountDTO, AccountEntity.class))
					.flatMap(account -> accountRepository.save(account))
					.map(accountEntity -> mapper.map(accountEntity, AccountDTO.class));
		}
	}
	public Mono<AccountDTO> deleteAccount(AccountDTO accountDTO){
		if((checkDuplicate(accountDTO).block()).equals(Boolean.TRUE)) {
			 return Mono.just(accountDTO)
					 .map(account -> mapper.map(account, AccountEntity.class))
					 .map(accountEntity -> accountRepository.deleteById(accountEntity.getId()))
					 .map((accountEntity -> mapper.map(accountEntity, AccountDTO.class)));
		}
		else {

			return Mono.error(new Exception());
		}
	}
	public Mono<ProductDTO> createProduct(ProductDTO productDTO){
		return accountProducer.send(, productDTO)
	}
}
