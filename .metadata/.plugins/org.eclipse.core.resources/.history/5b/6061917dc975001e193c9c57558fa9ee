package com.example.demo.Controlller;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.DTO.LessionDTO;
import com.example.demo.Service.LesssionService;
import com.example.demo.utils.CommonValidate;
import com.example.demo.utils.Constant;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.DriveScopes;
import com.google.api.services.drive.model.File;
import com.google.api.services.drive.model.FileList;
import com.google.gson.Gson;
import com.google.api.client.http.FileContent;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import jakarta.annotation.PostConstruct;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;


@RestController
@Slf4j
public class LessionController {
	private static HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
	private static JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();

	private static final List<String> SCOPES = Arrays.asList(DriveScopes.DRIVE,
			"https://www.googleapis.com/auth/drive.install");

	private static final String USER_IDENTIFIER_KEY = "MY_DUMMY_USER";
    
    @Value("${google.oauth.callback.uri}")
	private String CALLBACK_URI;
	@Value("${google.secret.key.path}")
	private Resource gdSecretKeys;
	@Value("${google.credentials.folder.path}")
	private Resource credentialsFolder;

	
	private GoogleAuthorizationCodeFlow flow;
	
	@Autowired
	private LesssionService lesssionService;
	@Autowired
	Gson gson = new Gson();
	
	@PostConstruct
	public void init() throws Exception {
		GoogleClientSecrets secrets = GoogleClientSecrets.load(JSON_FACTORY,
				new InputStreamReader(gdSecretKeys.getInputStream()));
		flow = new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, JSON_FACTORY, secrets, SCOPES)
				.setDataStoreFactory(new FileDataStoreFactory(credentialsFolder.getFile())).build();
	}
	@GetMapping("/googlesignin" )
	public void doGoogleSignIn(HttpServletResponse response) throws Exception {
		GoogleAuthorizationCodeRequestUrl url = flow.newAuthorizationUrl();
		String redirectURL = url.setRedirectUri(CALLBACK_URI).setAccessType("offline").build();
		response.sendRedirect(redirectURL);
	}
	@GetMapping(value = { "/oauth" })
	public String saveAuthorizationCode(HttpServletRequest request) throws Exception {
		String code = request.getParameter("code");
		if (code != null) {
			saveToken(code);

			return "dashboard.html";
		}
		return "index.html";
	}
	private void saveToken(String code) throws Exception {
		GoogleTokenResponse response = flow.newTokenRequest(code).setRedirectUri(CALLBACK_URI).execute();
		flow.createAndStoreCredential(response, USER_IDENTIFIER_KEY);
	}
	
	@GetMapping("/")
	public FileList getallListlession()throws Exception{
		Credential cred = flow.loadCredential(USER_IDENTIFIER_KEY);

		Drive drive = new Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY, cred)
				.setApplicationName("googledrivespringbootexample").build();
		Flux<LessionDTO> allLesssionDTO = lesssionService.getAllAccount();
		FileList fileList = drive.files().list().setFields("files(id,name,thumbnailLink)").execute();
		
		return fileList;
	}
	
	@PostMapping("/Create")
	public ResponseEntity<Mono<LessionDTO>> createAccount(@RequestBody String requestStr)throws Exception{
		
		
		InputStream inputStream = LessionController.class.getClassLoader().getResourceAsStream(com.example.demo.Utils.Constant.JSON_CREATE_ACCOUNT);
		CommonValidate.jsonValidate(requestStr, inputStream);
		LessionDTO lessionDTO = gson.fromJson(requestStr,LessionDTO.class);
		Credential cred = flow.loadCredential(USER_IDENTIFIER_KEY);
		Drive drive = new Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY, cred).setApplicationName("googledrivespringbootexample").build();
		File file = new File();
		file.setName(lessionDTO.getTitle()+".mp4");
		FileContent content = new FileContent("video/mp4", new java.io.File(lessionDTO.getPath()));
		File uploadedFile = drive.files().create(file, content).setFields("id").execute();
		String fileReference = String.format("{fileID: '%s'}", uploadedFile.getId());
		lessionDTO.setVideo(fileReference);
		return ResponseEntity.status(HttpStatus.CREATED).body(lesssionService.createLession(lessionDTO));
	}
}
